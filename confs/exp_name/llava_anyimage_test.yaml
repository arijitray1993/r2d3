exp_name: llava_anyimage_test
device: 'gpu'
num_devices: 1
num_workers: 2

### loading checkpoints, eval, train options
num_epochs: 50
batch_size: 1
lr: 0.00001
weight_decay: 0.0001
lr_scheduler: "cosine"
eval_only: True # if this is set to True, only the val dataset will be run.
tune_lora: True
load_checkpoint: False

lora_model_path: /projectnb/ivc-ml/array/research/robotics/dreamworlds/checkpoints/llava_mixdata_randompoint/dauntless-frost-49_155000

eval_every: 2000
num_eval_steps: 100
no_shuffle: False


## define your val dataset, the name must match the class name in datasets/dataloaders.py. This is run only when eval_only is set to True
val_dataset_choice: "AnyImageCaption"
val_dataset_args: {
  image_data_path: "/projectnb/ivc-ml/array/research/robotics/dreamworlds/custom_datasets/simple_real_ims"
}
val_collate_fn: "collate_fn" 
# The dataset __getitem__ must return a dictionary.


#define model. The name must match the class name in models/model_interface.py
model_choice: "LlavaModel_13B_Interface"
model_init_args: {
  temperature: 0,
  top_p: None,
  num_beams: 1,
  max_new_tokens: 768
}
# the model must output a huggingface output in its forward function.
 
# These are the inputs to the model. These variables must be present in the dictionary output from your dataloader in datasets/dataloaders.py.
model_input_choice: ['input_ids', 'attention_mask', 'pixel_values', 'labels']
 
# these are the losses. Must be defined in models/losses.py
# for each entry, the first variable is the loss name, the second entry is a list of argument inputs to the loss.
# The model outputs can be accessed by model_outputs[key]. The key is the ykey you defined in the dictionary output of the model forward
# The dataloader outputs (say the GT label) can be accessed similary in data_batch[] dictionary

losses: [] 
 
## Metrics [name, torchmetric_class_name_in_eval.py, metric init args, metric update args]:
metrics: [ 
  ['HouseJsonSimilarity', 'HouseJsonSimilarity', [], []],
]
