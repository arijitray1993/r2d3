exp_name: llava_incomplete_oneim_attr_campolygonangle_nomarksbaseline
device: 'gpu'
num_devices: 1
num_workers: 4

### loading checkpoints, eval, train options
num_epochs: 50
batch_size: 1
lr: 0.000005
weight_decay: 0
lr_scheduler: "cosine"
eval_only: True # if this is set to True, only the val dataset will be run.
tune_lora: True
load_checkpoint: False

gradient_accumulation_steps: 8

lora_model_path: /projectnb/ivc-ml/array/research/robotics/dreamworlds/checkpoints/llava_incomplete_oneim_attr_campolygonangle_nomarksbaseline/polar-blaze-30_110000

eval_every: 5000
num_eval_steps: 500
no_shuffle: False

freeze_vision: False

train_dataset_choice: "ProcTHOR_image_camposition_marked"
train_dataset_args: {
  split: "train",
  mode: "train",
  include_children: False,
  use_no_mark_baseline: True,
  use_angle: True,
  use_attributes: True,
}
train_collate_fn: "collate_fn"


## define your valtrain dataset, the name must match the class name in datasets/dataloaders.py. This is run during training to help choose best checkpoint
valtrain_dataset_choice:  "ProcTHOR_image_camposition_marked"
valtrain_dataset_args: {
  split: "valtrain",
  mode: "val",
  include_children: False,
  use_no_mark_baseline: True,
  use_attributes: True,
  use_angle: True,
}

## define your val dataset, the name must match the class name in datasets/dataloaders.py. This is run only when eval_only is set to True
val_dataset_choice: "ProcTHOR_image_camposition_marked"
val_dataset_args: {
  split: "val",
  mode: "val",
  include_children: False,
  use_no_mark_baseline: True,
  use_angle: True,
  use_attributes: True,
}
val_collate_fn: "collate_fn" 


## define model. The name must match the class name in models/model_interface.py
model_choice: "LlavaModel_13B_Interface"
model_init_args: {
  temperature: 0,
  top_p: None,
  num_beams: 1,
  max_new_tokens: 768
}
# the model must output a huggingface output in its forward function.
 
# These are the inputs to the model. These variables must be present in the dictionary output from your dataloader in datasets/dataloaders.py.
model_input_choice: ['input_ids', 'attention_mask', 'pixel_values', 'labels']
 
## Metrics [name, torchmetric_class_name_in_eval.py, metric init args, metric update args]:
metrics: [ 
  ['HouseJsonSimilarity', 'HouseJsonSimilarity', [], []],
]
